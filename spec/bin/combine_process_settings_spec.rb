# frozen_string_literal: true

require 'spec_helper'
require 'process_settings/hash_path'

describe 'combine_process_settings' do
  it "should print usage and exit 1 if no arguments given" do
    output = `bin/combine_process_settings 2>&1`

    expect(output).to eq(<<~EOS)
      usage: combine_process_settings -r staging|production -o combined_process_settings.yml [--version=VERSION] [-i initial_combined_process_settings.yml] (-i required if --version= not set)
          -v, --verbose                    Verbose mode.
          -n, --version=VERSION            Set version number.
          -r, --root_folder=ROOT
          -o, --output=FILENAME            Output file.
          -i, --initial=FILENAME           Initial settings file for version inference.
    EOS
    expect($?.exitstatus).to eq(1)
  end

  it "should print usage and exit 1 if no -i and no --version" do
    output = `bin/combine_process_settings -r spec/fixtures/production -o tmp/combined_process_settings.yml 2>&1`

    expect(output).to eq(<<~EOS)
      usage: combine_process_settings -r staging|production -o combined_process_settings.yml [--version=VERSION] [-i initial_combined_process_settings.yml] (-i required if --version= not set)
          -v, --verbose                    Verbose mode.
          -n, --version=VERSION            Set version number.
          -r, --root_folder=ROOT
          -o, --output=FILENAME            Output file.
          -i, --initial=FILENAME           Initial settings file for version inference.
    EOS
    expect($?.exitstatus).to eq(1)
  end

  it "should combine all settings files alphabetically, with a magic comment at the top and meta: at the end" do
    output = `bin/combine_process_settings --version=42 -r spec/fixtures/production -o tmp/combined_process_settings.yml && cat tmp/combined_process_settings.yml && rm -f tmp/combined_process_settings.yml`

    expect(output).to eq(<<~EOS)
      ---
      #
      # Don't edit this file directly! It was generated by combine_process_settings from the files in production/settings/.
      #
      - filename: debug_sip_private_caller_id.yml
        target:
          app: telecom
          region: west
        settings:
          log_stream:
            sip: caller_id_privacy
      - filename: honeypot.yml
        settings:
          honeypot:
            max_recording_seconds: 600
            answer_odds: 100
            status_change_min_days: 10
      - filename: stop_incoming_requests.yml
        target:
          region: east
        settings:
          incoming_requests: 0
      - filename: tech-1234_call_counts_drift_investigation.yml
        target:
          app: ccn
        settings:
          call_counts:
            complete_sync_seconds: 60
      - meta:
          version: 42
          END: true
    EOS

    expect($?.exitstatus).to eq(0)
  end

  context "with initial combined_process_settings.yml" do
    before do
      FileUtils.mkdir("tmp") rescue nil
      File.write("tmp/combined_process_settings.yml", [{ 'meta' => { 'version' => 42, 'END' => true } }].to_yaml)
    end

    after do
      FileUtils.rm_f("tmp/combined_process_settings.yml")
    end

    it "use a default version of the latest + 1" do
      output = `bin/combine_process_settings -r spec/fixtures/production -o tmp/combined_process_settings.yml -i tmp/combined_process_settings.yml && cat tmp/combined_process_settings.yml`
      expect($?.exitstatus).to eq(0), output

      output_json_doc = YAML.load(output)

      version = output_json_doc.last['meta']&.[]('version')

      expect(version).to eq(43)
    end

    it "ignores --version= with no version" do
      output = `bin/combine_process_settings -r spec/fixtures/production -o tmp/combined_process_settings.yml --version= -i tmp/combined_process_settings.yml && cat tmp/combined_process_settings.yml`
      expect($?.exitstatus).to eq(0), output

      output_json_doc = YAML.load(output)

      version = output_json_doc.last['meta']&.[]('version')

      expect(version).to eq(43)
    end
  end
end
