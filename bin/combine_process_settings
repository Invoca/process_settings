#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'yaml'
require_relative '../lib/process_settings/targeted_settings'

PROGRAM_NAME = File.basename($PROGRAM_NAME)
SETTINGS_FOLDER = 'settings'

def end_marker(version)
  {
    'meta' => {
      'version' => version,
      'END' => true
    }
  }
end

# returns a version number one higher than what's in the latest_output_file
def default_version_number(latest_output_file)
  process_settings = ProcessSettings::TargetedSettings.from_file(latest_output_file, only_meta: true)
  process_settings.version + 1
end


def parse_options(argv)
  options = OpenStruct.new
  options.verbose = false
  option_parser = OptionParser.new(argv) do |opt|
    opt.on('-v', '--verbose', 'Verbose mode.') { options.verbose = true }
    opt.on('-n', '--version=VERSION', 'Set version number.') { |value| options.version = value.to_i unless value.empty? }
    opt.on('-r', '--root_folder=ROOT') { |o| options.root_folder = o }
    opt.on('-o', '--output=FILENAME', 'Output file.') { |o| options.output_filename = o }
    opt.on('-i', '--initial=FILENAME', 'Initial settings file for version inference.') { |o| options.initial_filename = o }
  end

  if option_parser.parse! && options.root_folder && options.output_filename && (options.version || options.initial_filename)
    options
  else
    warn "usage: #{PROGRAM_NAME} -r staging|production -o combined_process_settings.yml [--version=VERSION] [-i initial_combined_process_settings.yml] (-i required if --version= not set)"
    option_parser.summarize(STDERR)
    exit(1)
  end
end

def read_and_combine_settings(settings_folder)
  pushd(settings_folder) do
    Dir.glob("**/*.yml").sort.map do |settings_path|
      settings = { 'filename' => settings_path }  # start with the filename so it appears at the top of each section
      settings.merge!(YAML.load_file(settings_path))
      settings
    end
  end
end

def pushd(folder)
  pwd = FileUtils.pwd
  FileUtils.cd(folder)
  yield
ensure
  FileUtils.cd(pwd)
end

def add_warning_comment(yaml, root_folder, program_name, settings_folder)
  warning_comment = <<~EOS
  #
  # Don't edit this file directly! It was generated by #{program_name} from the files in #{root_folder.rpartition('/').last}/#{settings_folder}/.
  #
  EOS

  yaml.sub("\n", "\n" + warning_comment)
end

MINIMUM_LIBYAML_VERSION = '0.2.5' # So that null (nil) values don't have trailing spaces.

def warn_if_old_libyaml_version
  if Gem::Version.new(Psych::LIBYAML_VERSION) < Gem::Version.new(MINIMUM_LIBYAML_VERSION)
    warn <<~EOS

      #{PROGRAM_NAME} warning: libyaml version #{Psych::LIBYAML_VERSION} is out of date; it should be at least #{MINIMUM_LIBYAML_VERSION}. On a Mac, try:

          brew update && brew upgrade libyaml

      You may also need:

          gem install psych -- --enable-bundled-libyaml
    EOS
  end
end

def settings_files_match?(filename_1, filename_2)
  filename_1 && filename_2 &&
    File.exist?(filename_1) && File.exist?(filename_2) &&
    diff_process_settings(filename_1, filename_2)
end

def diff_process_settings(filename_1, filename_2)
  system(<<~EOS)
    bundle exec diff_process_settings --silent "#{filename_1}" "#{filename_2}"
  EOS
  status_code = $?.exitstatus
  case status_code
  when 0
    true
  when 1
    false
  else
    raise "diff_process_settings failed with code #{status_code}"
  end
end

#
# main
#

options = parse_options(ARGV.dup)

warn_if_old_libyaml_version

combined_settings = read_and_combine_settings(Pathname.new(options.root_folder) + SETTINGS_FOLDER)

version_number = options.version || default_version_number(options.initial_filename)
combined_settings << end_marker(version_number)

yaml = combined_settings.to_yaml.gsub(/: $/, ':') # libyaml before 0.2.5 wrote trailing space for nil
yaml_with_warning_comment = add_warning_comment(yaml, options.root_folder, PROGRAM_NAME, SETTINGS_FOLDER)

output_filename     = options.output_filename
tmp_output_filename = "#{output_filename}.tmp"

system("rm -f #{tmp_output_filename}")
File.write(tmp_output_filename, yaml_with_warning_comment)

if settings_files_match?(options.initial_filename, tmp_output_filename)
  if settings_files_match?(output_filename, tmp_output_filename)
    puts "#{options.root_folder}: unchanged" if options.verbose
    FileUtils.rm_f(tmp_output_filename)
  else
    puts "#{options.root_folder}: UPDATING (changed now)" if options.verbose
    FileUtils.mv(tmp_output_filename, output_filename)
  end
else
  puts "#{options.root_folder}: UPDATING (unchanged now, but changed from initial)" if options.verbose
  FileUtils.mv(tmp_output_filename, output_filename)
end

exit(0)
